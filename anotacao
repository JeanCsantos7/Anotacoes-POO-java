ProgramaÃ§Ã£o orientada a objetos

ParÃ¢metros recebidos por mÃ©todos:
Em Java, ao passar valores para mÃ©todos, Ã© importante entender a diferenÃ§a entre:

ğŸ”¹ 1. Tipos Primitivos (int, double, char, etc.)
SÃ£o passados por valor.

Isso significa que Ã© criada uma cÃ³pia do valor original para ser usada dentro do mÃ©todo.

AlteraÃ§Ãµes feitas dentro do mÃ©todo nÃ£o afetam a variÃ¡vel original.

ğŸ“Œ Analogia:
Ã‰ como tirar uma cÃ³pia da sua folha de prova e entregar para um amigo.
Ele pode riscar, apagar, mudar o que quiser â€” mas a sua folha original continua intacta.

ğŸ”¹ 2. Tipos de ReferÃªncia (objetos criados com new)
SÃ£o passados por valor da referÃªncia (ou seja, do "endereÃ§o" do objeto).

Tanto o mÃ©todo quanto quem chamou estÃ£o acessando o mesmo objeto na memÃ³ria.

AlteraÃ§Ãµes nas propriedades do objeto afetam o original.

ğŸ“Œ Analogia:
Ã‰ como dividir um guarda-roupa com alguÃ©m.
Se vocÃª coloca uma roupa azul, e a outra pessoa entra e coloca uma roupa verde no mesmo espaÃ§o, a azul foi substituÃ­da â€” porque ambos estÃ£o mexendo no mesmo lugar.

This -

VarArgs - o varargs Ã© uma maneira mais simplificada de passar um nÃºmero indefinido de parÃ¢metros, utilizando reticÃªncias no final do nome do parametro por exemplo.

public class Numeros{

 public somaNumeros(int... numeros){
   int total = 0;
    for (int num : numeros) {
        total += num;
    }
    System.out.println("Soma: " + total);
 
 }

forma de uso em outra classe = 
somaNumeros(20, 29, 39, 55)

}

lembrando que sÃ³ posso ter um varArgs por mÃ©todo e ele deve ser sempre o ultimo parametro.
