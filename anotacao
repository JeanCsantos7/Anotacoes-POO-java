Programa√ß√£o orientada a objetos

Par√¢metros recebidos por m√©todos:
Em Java, ao passar valores para m√©todos, √© importante entender a diferen√ßa entre:

üîπ 1. Tipos Primitivos (int, double, char, etc.)
S√£o passados por valor.

Isso significa que √© criada uma c√≥pia do valor original para ser usada dentro do m√©todo.

Altera√ß√µes feitas dentro do m√©todo n√£o afetam a vari√°vel original.

üìå Analogia:
√â como tirar uma c√≥pia da sua folha de prova e entregar para um amigo.
Ele pode riscar, apagar, mudar o que quiser ‚Äî mas a sua folha original continua intacta.

üîπ 2. Tipos de Refer√™ncia (objetos criados com new)
S√£o passados por valor da refer√™ncia (ou seja, do "endere√ßo" do objeto).

Tanto o m√©todo quanto quem chamou est√£o acessando o mesmo objeto na mem√≥ria.

Altera√ß√µes nas propriedades do objeto afetam o original.

üìå Analogia:
√â como dividir um guarda-roupa com algu√©m.
Se voc√™ coloca uma roupa azul, e a outra pessoa entra e coloca uma roupa verde no mesmo espa√ßo, a azul foi substitu√≠da ‚Äî porque ambos est√£o mexendo no mesmo lugar.

- This -

- VarArgs - o varargs √© uma maneira mais simplificada de passar um n√∫mero indefinido de par√¢metros, utilizando retic√™ncias no final do nome do parametro por exemplo.

public class Numeros{

 public somaNumeros(int... numeros){
   int total = 0;
    for (int num : numeros) {
        total += num;
    }
    System.out.println("Soma: " + total);
 
 }

forma de uso em outra classe = 
somaNumeros(20, 29, 39, 55)

}

lembrando que s√≥ posso ter um varArgs por m√©todo e ele deve ser sempre o ultimo parametro.

- Private : O private √© um modificador de acesso que limita a visualiza√ß√£o e altera√ß√£o de atributos do objeto para que ele s√≥ possa ser controlado dentro do pr√≥prio objeto, com isso a forma de manipular os atributos que est√£o privados existem os setters e os getters.
- Setter: o setter ou a forma como a conven√ß√£o √© realizada setAlgumaCoisa serve para setar/atribuir um valor a variavel, por exemplo seria 
 public void setNome(String nome){
 this.nome = nome;
 }

- Geter: o Getter ou a forma como a conven√ß√£o √© realizada getAlgumaCoisa serve para pegar o valor atual que est√° atribuido a aquela vari√°vel, por exemplo a forma de uso √© 
public String getNome() {
        System.out.println("Nome Atual: " + Nome);
        return carrinho ;

    }

- Sobrecarga de m√©todos: A sobrecarga de m√©todos basicamente √© repetir o mesmo m√©todo exatamente o mesmo nome s√≥ mudando que ele n√£o pode ser amb√≠guo ou seja n√£o pode ter os mesmos par√¢metros, eu vou repetir o m√©todo s√≥ que com novos par√¢metros, vamos exemplificar isso:
Vamos supor que temos o sistema de uma lanchonete e temos um bot√£o chamado fazer pedido, n√≥s n√£o vamos criar um bot√£o pra cada varia√ß√£o de pedido que os clientes v√£o fazer, ai que entra a sobrecarga n√≥s podemos ir criando parametros com as varia√ß√µes de lanches que podem vir a serem solicitiados por exemplo.

public void fazerPedido(String hamburguer){
System.out.println("M√©todo 1")
}

public void fazerPedido(String hamburguer, String bebida){
System.out.println("M√©todo 2")
}

public void fazerPedido(String hamburguer, String bebida, String sobremesa){
System.out.println("M√©todo 3")
}
